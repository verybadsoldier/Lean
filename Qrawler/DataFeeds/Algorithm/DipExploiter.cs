using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using QuantConnect.Algorithm.CSharp.Alphas;
using QuantConnect.Algorithm.Framework.Selection;
using QuantConnect.Data;
using QuantConnect.Data.Market;

namespace QuantConnect.Algorithm.CSharp
{
    class DipExploiter : QCAlgorithm
    {
        public override void Initialize()
        {
            SetStartDate(2019, 1, 07);  //Set Start Date
            SetEndDate(2019, 10, 11);    //Set End Date
            SetCash(100000);             //Set Strategy Cash
            SetBenchmark("GOD:DAX");

            // Find more symbols here: http://quantconnect.com/data
            Market.Add("xetra", 124);

    //        SetStartDate(2019, 6, 12);  //Set Start Date
//            SetBenchmark(QuantConnect.Symbol.Create("GOD:DAX", SecurityType.Equity, "xetra"));

            //AddSecurity(SecurityType.Equity, "GOD:BTCUSD", Resolution.Hour, "xetra", true, 0.0m, false);
            //AddEquity("AAPL", Resolution.Daily);

            UniverseSettings.Resolution = Resolution.Hour;
            var symbols = new[]
            {
                QuantConnect.Symbol.Create("GOD:BTCUSD", SecurityType.Equity,"xetra"),
                QuantConnect.Symbol.Create("GOD:DAX", SecurityType.Equity, "xetra"),
            };
/*            IEnumerable<TradeBar> hist = History(symbols[0], new DateTime(2019, 1, 1), new DateTime(2019, 5, 1), Resolution.Hour);

            foreach (var h in hist)
            {
                Console.WriteLine(h);
            }*/
            AddUniverseSelection(new ManualUniverseSelectionModel(symbols));
            
            SetWarmUp(20);
        }
        public void OnData(TradeBars data)
        {
            if (!Portfolio.Invested)
            {
           //     SetHoldings("SPY", 1);
          //      Debug("Purchased Stock");
            }
        }
        /// OnData event is the primary entry point for your algorithm. Each new data point will be pumped in here.
        /// Slice object keyed by symbol containing the stock data
        public override void OnData(Slice slice)
        {
            //TradeBar bar = slice.Bars["AAPL"];
            return;
//            if (!slice.Bars.TryGetValue("SPY", out bar))
  //              return;
  /*
            if (bar.Time.DayOfWeek == DayOfWeek.Monday)
            {
                SetHoldings("AAPL", 1);
            }
            else if (bar.Time.DayOfWeek == DayOfWeek.Thursday)
            {
                SetHoldings("AAPL", 0);
            }
            */
        }

        public void OnData(Ticks data)
        {
            if (!Portfolio.Invested)
            {
            //    SetHoldings("SPY", 1);
           //     Debug("Purchased Stock");
            }
        }
    }
}
